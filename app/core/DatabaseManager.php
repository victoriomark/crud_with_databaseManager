<?phpclass DatabaseManager{    // Properties    private $DB_HOST = 'localhost';    private $DB_USER = 'root';    private $DB_PASS = '';    private $DB_NAME = 'rest_api_demo';    private $DbConnection;    // Constructor to initialize database connection    public function __construct()    {        $this->Connect();    }    // Method for Database Connection    private function Connect()    {        try {            $this->DbConnection = new mysqli($this->DB_HOST, $this->DB_USER, $this->DB_PASS, $this->DB_NAME);            if ($this->DbConnection->connect_error) {                throw new Exception('Connection Failed: ' . $this->DbConnection->connect_error);            }        } catch (Exception $e) {            throw new Exception('Error: ' . $e->getMessage());        }    }    // Method for executing prepared statements    private function executeStatement($sql, $params)    {        $stmt = $this->DbConnection->prepare($sql);        if (!$stmt) {            throw new Exception('Error in preparing statement: ' . $this->DbConnection->error);        }        if (!empty($params)) {            $types = '';            foreach ($params as $param) {                if (is_int($param)) {                    $types .= 'i';                } elseif (is_string($param)) {                    $types .= 's';                } elseif (is_double($param)) {                    $types .= 'd';                }            }            $stmt->bind_param($types, ...$params);        }        $stmt->execute();        return $stmt;    }    // Insert data into table    public function insert($table, $data)    {        $columns = implode(",", array_keys($data));        $placeholders = implode(",", array_fill(0, count($data), '?'));        $values = array_values($data);        $sql = "INSERT INTO $table ($columns) VALUES ($placeholders)";        $stmt = $this->executeStatement($sql, $values);        return $stmt->affected_rows;    }    // new method  to update data    public function update($table,$data,$condation)    {        $setValue = implode(",",array_map(fn($key) => "$key =?",array_keys($data)));        $values = array_values($data);        $condationString = implode(" AND ", array_map(fn($key) => "$key = ?", array_keys($condation)));        $condationValues = array_values($condation);        $sql = "UPDATE $table SET $setValue WHERE $condationString";        $stmt = $this->executeStatement($sql,array_merge($values,$condationValues));       return $stmt->affected_rows;    }    public function showAll_whereStatusActive($table,$statusColumn,$statusValue)    {        try {            $query = "SELECT * FROM $table WHERE $statusColumn = ? ";            $stmt = $this->executeStatement($query,[$statusValue]);            return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);        }catch (Exception $e){            throw  new Exception('Error: '.$e->getMessage());        }    }    public function SelectBaseOnId($table,$Id)    {        try {            $query = "SELECT * FROM $table WHERE $Id = ?";            $stmt = $this->executeStatement($query,[$Id]);            return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);        }catch (Exception $e){            throw new Exception('Error: '.$e->getMessage());        }    }    public function delete($table,$conditionColumn,$conditionValue)    {        try {            $query = "DELETE FROM $table WHERE $conditionColumn = ?";            $stmt = $this->executeStatement($query,[$conditionValue]);            return $stmt->affected_rows;        }catch (Exception $e){            throw  new Exception('Error: '.$e->getMessage());        }    }}